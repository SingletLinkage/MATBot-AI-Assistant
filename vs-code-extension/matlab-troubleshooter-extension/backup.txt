extension.js === const vscode = require('vscode');
const path = require('path');
const fs = require('fs');
const { spawn } = require('child_process');
const axios = require('axios');

/**
 * @param {vscode.ExtensionContext} context
 */
async function activate(context) {
    console.log('MATLAB Troubleshooter is now active!');

    let pythonProcess = null;

    let disposable = vscode.commands.registerCommand('matlabTroubleshooter.start', async function () {
        const panel = vscode.window.createWebviewPanel(
            'matlabTroubleshooter',
            'MATLAB Troubleshooter',
            vscode.ViewColumn.Beside,
            {
                enableScripts: true,
                localResourceRoots: [vscode.Uri.file(path.join(context.extensionPath, 'media')), 
                                    vscode.Uri.file(path.join(context.extensionPath, 'src'))]
            }
        );

        panel.webview.html = getWebviewContent(panel.webview, context.extensionPath);

        if (!pythonProcess) {
            pythonProcess = await startPythonServer(context);
            
            // Wait for server to start
            let serverReady = false;
            let tries = 0;
            while (!serverReady && tries < 10) {
                try {
                    await axios.get('http://localhost:5000/health');
                    serverReady = true;
                    console.log('Python server is ready');
                } catch (error) {
                    console.log(`Waiting for server to start... (${tries}/10)`);
                    await new Promise(resolve => setTimeout(resolve, 1000)); // Wait 1 second
                    tries++;
                }
            }
            
            if (!serverReady) {
                vscode.window.showErrorMessage('Failed to start Python server. Check the logs for details.');
                return;
            }
        }

        panel.webview.onDidReceiveMessage(
            async message => {
                switch (message.command) {
                    case 'askQuestion':
                        try {
                            console.log(`Sending question to server: ${message.text.substring(0, 50)}...`);
                            const response = await axios.post('http://localhost:5000/troubleshoot', {
                                query: message.text
                            });
                            panel.webview.postMessage({
                                command: 'response',
                                text: response.data.answer,
                                sources: response.data.sources || []
                            });
                        } catch (error) {
                            console.error('Error connecting to Python server:', error);
                            
                            // Try to restart the server if it crashed
                            if (!pythonProcess || pythonProcess.exitCode !== null) {
                                vscode.window.showInformationMessage('Restarting Python server...');
                                pythonProcess = await startPythonServer(context);
                                await new Promise(resolve => setTimeout(resolve, 2000)); // Wait 2 seconds
                            }
                            
                            panel.webview.postMessage({
                                command: 'error',
                                text: 'Error connecting to the Python server. Server is being restarted, please try again in a moment.'
                            });
                        }
                        break;
                }
            },
            undefined,
            context.subscriptions
        );
        
        // Clean up the Python process when the panel is disposed
        panel.onDidDispose(() => {
            if (pythonProcess) {
                pythonProcess.kill();
                pythonProcess = null;
            }
        });
    });

    context.subscriptions.push(disposable);
}

async function startPythonServer(context) {
    // Check if the server is already running
    try {
        await axios.get('http://localhost:5000/health');
        console.log('Python server is already running');
        return null;
    } catch (error) {
        console.log('Starting Python server...');
    }

    // Get the Python extension
    const pythonExtension = vscode.extensions.getExtension('ms-python.python');
    if (!pythonExtension) {
        vscode.window.showErrorMessage('Python extension is not installed. Please install it to use this extension.');
        return null;
    }

    // Use the hardcoded Python path
    const pythonPath = '/media/hp/Void/Haru/Documents/CS671(DL)/Hackathon/venv/bin/python';

    if (!fs.existsSync(pythonPath)) {
        vscode.window.showErrorMessage(`Python interpreter not found at ${pythonPath}. Please update the path in the extension.`);
        return null;
    }

    // Look for api_adapter.py in possible locations
    const possiblePaths = [
        path.resolve(__dirname, '../../../AI-Troubleshooting-Agent'),
        path.resolve(__dirname, '../../AI-Troubleshooting-Agent'),
        path.resolve(__dirname, '../../../../AI-Troubleshooting-Agent'),
        path.resolve(__dirname, '../../New_arka/AI-Troubleshooting-Agent'),
        path.resolve(__dirname, '../../../New_arka/AI-Troubleshooting-Agent')
    ];

    let adapterPath = null;
    for (const basePath of possiblePaths) {
        const testPath = path.join(basePath, 'api_adapter.py');
        console.log(`Checking path: ${testPath}`);
        if (fs.existsSync(testPath)) {
            adapterPath = testPath;
            console.log(`Found adapter at: ${adapterPath}`);
            break;
        }
    }

    if (adapterPath) {
        vscode.window.showInformationMessage('Starting MATLAB Troubleshooter server...');
        console.log(`Starting Python server with: "${pythonPath}" "${adapterPath}"`);

        // Use spawn instead of exec to avoid buffer issues
        const pythonProcess = spawn(pythonPath, [adapterPath], {
            stdio: ['ignore', 'pipe', 'pipe']
        });
        
        // Set up data handlers with limited buffering
        if (pythonProcess.stdout) {
            pythonProcess.stdout.on('data', (data) => {
                console.log(`Python server output: ${data.toString().trim()}`);
            });
        }
        
        if (pythonProcess.stderr) {
            pythonProcess.stderr.on('data', (data) => {
                console.error(`Python server stderr: ${data.toString().trim()}`);
            });
        }

        pythonProcess.on('error', (error) => {
            console.error(`Failed to start Python server: ${error.message}`);
            vscode.window.showErrorMessage(`Failed to start Python server: ${error.message}`);
        });

        pythonProcess.on('close', (code) => {
            console.log(`Python server process exited with code ${code}`);
            if (code !== 0 && code !== null) {
                vscode.window.showErrorMessage(`Python server exited with code ${code}`);
            }
        });
        
        return pythonProcess;
    } else {
        console.error('Could not find api_adapter.py in expected locations');
        vscode.window.showErrorMessage('Could not find api_adapter.py. Ensure it\'s in the AI-Troubleshooting-Agent folder.');
        return null;
    }
}

function getWebviewContent(webview, extensionPath) {
    const scriptUri = webview.asWebviewUri(vscode.Uri.file(
        path.join(extensionPath, 'src', 'webview.js')
    ));

    return `<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>MATLAB Troubleshooter</title>
        <style>
            body {
                font-family: var(--vscode-font-family);
                padding: 0 20px;
                color: var(--vscode-editor-foreground);
                background-color: var(--vscode-editor-background);
            }
            .container {
                display: flex;
                flex-direction: column;
                height: 100vh;
                max-width: 800px;
                margin: 0 auto;
            }
            .header {
                padding: 10px 0;
                text-align: center;
            }
            .chat-container {
                flex: 1;
                overflow-y: auto;
                margin-bottom: 20px;
                border: 1px solid var(--vscode-panel-border);
                border-radius: 4px;
                padding: 10px;
            }
            .message {
                margin-bottom: 10px;
                padding: 8px 12px;
                border-radius: 4px;
                max-width: 80%;
                word-wrap: break-word;
            }
            .user-message {
                background-color: var(--vscode-button-background);
                color: var(--vscode-button-foreground);
                align-self: flex-end;
                margin-left: auto;
            }
            .bot-message {
                background-color: var(--vscode-editor-inactiveSelectionBackground);
                color: var(--vscode-editor-foreground);
            }
            .input-container {
                display: flex;
                margin-bottom: 20px;
            }
            #user-input {
                flex: 1;
                padding: 8px;
                border: 1px solid var(--vscode-input-border);
                border-radius: 4px;
                background-color: var(--vscode-input-background);
                color: var(--vscode-input-foreground);
            }
            button {
                padding: 8px 16px;
                margin-left: 10px;
                background-color: var(--vscode-button-background);
                color: var(--vscode-button-foreground);
                border: none;
                border-radius: 4px;
                cursor: pointer;
            }
            button:hover {
                background-color: var(--vscode-button-hoverBackground);
            }
            .sources {
                font-size: 0.8em;
                margin-top: 5px;
                color: var(--vscode-descriptionForeground);
            }
            pre {
                background-color: var(--vscode-textCodeBlock-background);
                padding: 10px;
                border-radius: 4px;
                overflow-x: auto;
            }
            code {
                font-family: var(--vscode-editor-font-family);
                font-size: 0.9em;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>MATLAB Troubleshooter</h1>
            </div>
            <div id="chat-container" class="chat-container">
                <div class="message bot-message">
                    Hello! I'm your MATLAB Troubleshooting Assistant. How can I help you today?
                </div>
            </div>
            <div class="input-container">
                <input type="text" id="user-input" placeholder="Type your MATLAB problem here...">
                <button id="send-button">Send</button>
            </div>
        </div>
        <script src="${scriptUri}"></script>
    </body>
    </html>`;
}

function deactivate() {}

module.exports = {
    activate,
    deactivate
};



webview.js = (function() {
    // Get the VS Code API
    const vscode = acquireVsCodeApi();
    
    // DOM elements
    const chatContainer = document.getElementById('chat-container');
    const userInput = document.getElementById('user-input');
    const sendButton = document.getElementById('send-button');

    // Function to add a message to the chat
    function addMessage(text, isUser, sources = []) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
        
        // Process text to handle markdown-like code blocks
        const formattedText = text.replace(/```(\w*)([\s\S]*?)```/g, function(match, language, code) {
            return `<pre><code class="${language}">${code.trim()}</code></pre>`;
        });
        
        messageDiv.innerHTML = formattedText;
        
        // Add sources if available
        if (sources && sources.length > 0) {
            const sourcesDiv = document.createElement('div');
            sourcesDiv.className = 'sources';
            sourcesDiv.innerHTML = '<strong>Sources:</strong><br>' + 
                sources.map(source => `- ${source}`).join('<br>');
            messageDiv.appendChild(sourcesDiv);
        }
        
        chatContainer.appendChild(messageDiv);
        
        // Scroll to the bottom
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    // Function to send a message
    function sendMessage() {
        const text = userInput.value.trim();
        if (!text) return;

        // Add user message to chat
        addMessage(text, true);
        
        // Add loading indicator
        const loadingDiv = document.createElement('div');
        loadingDiv.className = 'message bot-message';
        loadingDiv.textContent = 'Thinking...';
        chatContainer.appendChild(loadingDiv);
        
        // Send message to extension
        vscode.postMessage({
            command: 'askQuestion',
            text: text
        });
        
        // Clear input
        userInput.value = '';
        
        // Store the loading div reference to remove it later
        window.loadingDiv = loadingDiv;
    }

    // Event listeners
    sendButton.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    // Handle messages from the extension
    window.addEventListener('message', event => {
        const message = event.data;
        
        // Remove the loading indicator if it exists
        if (window.loadingDiv) {
            chatContainer.removeChild(window.loadingDiv);
            window.loadingDiv = null;
        }
        
        switch (message.command) {
            case 'response':
                addMessage(message.text, false, message.sources);
                break;
            case 'error':
                addMessage(`Error: ${message.text}`, false);
                break;
        }
    });

    // Ensure the user input is focused when the webview loads
    userInput.focus();
})();


api_adapter.py = from flask import Flask, request, jsonify
from query_processor import process_query
from dotenv import load_dotenv
import logging
import os
import sys

# Set up logging to a file to avoid filling up stderr buffer
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("api_adapter.log"),
        logging.StreamHandler(sys.stdout)  # Use stdout instead of stderr
    ]
)
logger = logging.getLogger(__name__)

# Load environment variables
try:
    load_dotenv()
    logger.info("Environment variables loaded")
except Exception as e:
    logger.error(f"Error loading .env file: {e}")

app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health_check():
    """Simple health check endpoint to verify the server is running."""
    logger.info("Health check endpoint called")
    return jsonify({"status": "ok"})

@app.route('/troubleshoot', methods=['POST'])
def troubleshoot():
    """Process a troubleshooting query and return the response."""
    logger.info("Troubleshoot endpoint called")
    
    data = request.json
    if not data or 'query' not in data:
        logger.warning("Missing query parameter")
        return jsonify({"error": "Missing query parameter"}), 400
    
    query = data['query']
    context = data.get('context', "")
    
    logger.info(f"Received query: {query[:50]}...")
    
    try:
        # Process the query
        final_output, score, explanation = process_query(query, context)
        
        # Return the response
        logger.info("Sending response back to client")
        return jsonify({
            "answer": final_output,
            "score": score,
            "explanation": explanation,
            "sources": ["MATLAB Documentation"]  # Adding default sources for UI display
        })
    except Exception as e:
        logger.error(f"Error in troubleshoot endpoint: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    # Print a message to indicate server is starting
    print("Starting MATLAB Troubleshooter API Server on port 5000...")
    
    # Run the Flask app
    app.run(host='127.0.0.1', port=5000, debug=False, threaded=True)



Older version of the pythonserver setup in extesnion.js = async function startPythonServer(context) {
    // Check if the server is already running
    try {
        await axios.get('http://localhost:5000/health', { timeout: 1000 });
        console.log('Python server is already running');
        return null;
    } catch (error) {
        if (error.code !== 'ECONNREFUSED' && !error.message.includes('timeout')) {
            console.log('Server might be running but returned an error:', error.message);
            return null;
        }
        console.log('Starting Python server...');
    }

    // Get the Python extension
    const pythonExtension = vscode.extensions.getExtension('ms-python.python');
    if (!pythonExtension) {
        throw new Error('Python extension is not installed. Please install it to use this extension.');
    }

    // Attempt to get the Python path from user settings or use a hardcoded path
    let pythonPath;
    // pythonPath = '/media/hp/Void/Haru/Documents/CS671(DL)/Hackathon/venv/bin/python';  // Default fallback
    
    // Try getting from VS Code Python extension settings
    try {
        const pythonConfig = vscode.workspace.getConfiguration('python');
        pythonPath = pythonConfig.get('defaultInterpreterPath') || pythonConfig.get('pythonPath');
    } catch (error) {
        console.error('Error getting Python path from settings:', error);
    }
    
    // If not found in settings, try a hardcoded path (modify this for your environment)
    if (!pythonPath) {
        pythonPath = '/usr/bin/python3';  // Default fallback
        
        // If we know we have a specific path that might work, try that
        const possiblePaths = [
            '/media/hp/Void/Haru/Documents/CS671(DL)/Hackathon/venv/bin/python',
            '/usr/bin/python3',
            '/usr/local/bin/python3'
        ];
        
        // Find the first path that exists
        for (const testPath of possiblePaths) {
            if (fs.existsSync(testPath)) {
                pythonPath = testPath;
                break;
            }
        }
    }

    // Check if the Python path exists
    if (!fs.existsSync(pythonPath)) {
        throw new Error(`Python interpreter not found at ${pythonPath}. Please update the path in the extension settings.`);
    }


    Older veersion of the Webview in the extension.js  = function getWebviewContent(webview, extensionPath, scriptUri = null) {
    // If scriptUri is not provided, generate it
    if (!scriptUri) {
        scriptUri = webview.asWebviewUri(vscode.Uri.file(
            path.join(extensionPath, 'src', 'webview.js')
        ));
    }
    const logoUri = webview.asWebviewUri(vscode.Uri.file(
        path.join(extensionPath, 'media', 'icon.png')
    ));
    // Create CSS URI
    const cssUri = webview.asWebviewUri(vscode.Uri.file(
        path.join(extensionPath, 'css', 'style.css')
    ));

    return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MATLAB Troubleshooter</title>
    <style>
        :root {
            --user-bg: #0E639C;
            --user-text: #ffffff;
            --bot-bg: #2D2D2D;
            --bot-text: #E8E8E8;
            --code-bg: #1E1E1E;
            --code-text: #D4D4D4;
            --border: #474747;
            --header-bg: #333333;
            --button-bg: #0E639C;
            --button-hover: #1177BB;
        }
        
        body {
            font-family: var(--vscode-font-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
            padding: 0;
            margin: 0;
            color: var(--vscode-editor-foreground);
            background-color: var(--vscode-editor-background);
            line-height: 1.5;
        }
        
        .container {
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-width: 900px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        .header {
            padding: 15px 0;
            text-align: center;
            background-color: var(--header-bg);
            border-bottom: 1px solid var(--border);
            margin-bottom: 20px;
            border-radius: 0 0 8px 8px;
        }
        
        .header h1 {
            margin: 0;
            color: #ffffff;
            font-size: 1.5rem;
        }
        
        .chat-container {
            flex: 1;
            overflow-y: auto;
            margin-bottom: 20px;
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 15px;
            background-color: rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 12px 15px;
            border-radius: 8px;
            max-width: 85%;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            position: relative;
            line-height: 1.5;
        }
        
        .user-message {
            background-color: var(--user-bg);
            color: var(--user-text);
            align-self: flex-end;
            margin-left: auto;
            border-bottom-right-radius: 2px;
        }
        
        .bot-message {
            background-color: var(--bot-bg);
            color: var(--bot-text);
            align-self: flex-start;
            border-bottom-left-radius: 2px;
        }
        
        .message p {
            margin: 0 0 10px 0;
        }
        
        .message p:last-child {
            margin-bottom: 0;
        }
        
        .message h1, .message h2, .message h3 {
            margin-top: 0;
            margin-bottom: 12px;
            padding-bottom: 8px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            color: #FF9E64;
        }
        
        .message pre {
            background-color: var(--code-bg);
            padding: 12px;
            border-radius: 6px;
            overflow-x: auto;
            margin: 10px 0;
            border-left: 3px solid #FF9E64;
        }
        
        .message code {
            font-family: 'Consolas', 'Courier New', monospace;
            font-size: 0.9em;
            background-color: rgba(0, 0, 0, 0.2);
            padding: 2px 4px;
            border-radius: 3px;
            color: var(--code-text);
        }
        
        .message pre code {
            background-color: transparent;
            padding: 0;
            border-radius: 0;
            color: var(--code-text);
        }
        
        .input-container {
            display: flex;
            margin-bottom: 20px;
            position: relative;
        }
        
        #user-input {
            flex: 1;
            padding: 12px 15px;
            border: 1px solid var(--border);
            border-radius: 8px;
            background-color: var(--bot-bg);
            color: var(--bot-text);
            font-size: 1rem;
            transition: all 0.2s ease;
        }
        
        #user-input:focus {
            outline: none;
            border-color: var(--button-bg);
            box-shadow: 0 0 0 2px rgba(14, 99, 156, 0.25);
        }
        
        button {
            padding: 12px 20px;
            margin-left: 10px;
            background-color: var(--button-bg);
            color: #ffffff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: background-color 0.2s ease;
        }
        
        button:hover {
            background-color: var(--button-hover);
        }
        
        .sources {
            font-size: 0.85em;
            margin-top: 8px;
            padding-top: 8px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.6);
        }
        
        /* Loading animation */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 40px;
        }
        
        .dot-flashing {
            position: relative;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: #fff;
            color: #fff;
            animation: dot-flashing 1s infinite linear alternate;
            animation-delay: 0.5s;
        }
        
        .dot-flashing::before, .dot-flashing::after {
            content: '';
            display: inline-block;
            position: absolute;
            top: 0;
        }
        
        .dot-flashing::before {
            left: -15px;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: #fff;
            color: #fff;
            animation: dot-flashing 1s infinite alternate;
            animation-delay: 0s;
        }
        
        .dot-flashing::after {
            left: 15px;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: #fff;
            color: #fff;
            animation: dot-flashing 1s infinite alternate;
            animation-delay: 1s;
        }
        
        @keyframes dot-flashing {
            0% {
                background-color: #fff;
            }
            50%, 100% {
                background-color: rgba(255, 255, 255, 0.2);
            }
        }
        
        /* Message feedback styling */
        .message-feedback {
            display: flex;
            justify-content: flex-end;
            margin-top: 10px;
        }
        
        .feedback-button {
            background: transparent;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            cursor: pointer;
            padding: 5px;
            margin-left: 10px;
            border-radius: 50%;
            transition: all 0.2s ease;
        }
        
        .feedback-button:hover {
            background-color: rgba(255, 255, 255, 0.1);
            transform: scale(1.1);
        }
        
        .feedback-message {
            font-size: 0.85em;
            margin-top: 10px;
            color: rgba(255, 255, 255, 0.7);
            font-style: italic;
        }
        
        .feedback-input-container {
            display: flex;
            margin-top: 10px;
            width: 100%;
        }
        
        .feedback-text-input {
            flex: 1;
            padding: 8px 12px;
            border: 1px solid var(--border);
            border-radius: 6px;
            background-color: rgba(0, 0, 0, 0.2);
            color: var(--bot-text);
        }
        
        .feedback-submit {
            padding: 8px 12px;
            margin-left: 8px;
            border-radius: 6px;
        }
        
        .improved-tag {
            position: absolute;
            top: -10px;
            right: 10px;
            background-color: #388E3C;
            color: white;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.7em;
            font-weight: bold;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><img src="${logoUri}" class="logo" alt="MATLAB Troubleshooter Logo">MATLAB Troubleshooter</h1>
        </div>
        <div id="chat-container" class="chat-container">
            <div class="message bot-message">
                <div class="message-content">
                    <h3>Welcome to MATLAB Troubleshooter!</h3>
                    <p>I'm your MATLAB Troubleshooting Assistant. I can help you solve MATLAB errors, fix code issues, and provide guidance on best practices.</p>
                    <p>How can I help you today?</p>
                </div>
            </div>
        </div>
        <div class="input-container">
            <input type="text" id="user-input" placeholder="Type your MATLAB problem here...">
            <button id="send-button">Send</button>
        </div>
    </div>
    <script src="${scriptUri}"></script>
</body>
</html>`;
}


some old loading animation  =         /* Loading animation */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 40px;
            padding-left: 40px; /* Space for logo */
            position: relative;
        }
        
        .loading .bot-logo {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            width: 20px;
            height: 20px;
            border-radius: 50%;
            box-shadow: 0 0 5px rgba(255, 158, 100, 0.4);
        }
        
        .dot-flashing {
            position: relative;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: var(--accent-color);
            color: var(--accent-color);
            animation: dot-flashing 1s infinite linear alternate;
            animation-delay: 0.5s;
        }
        
        .dot-flashing::before, .dot-flashing::after {
            content: '';
            display: inline-block;
            position: absolute;
            top: 0;
        }
        
        .dot-flashing::before {
            left: -15px;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: var(--accent-color);
            color: var(--accent-color);
            animation: dot-flashing 1s infinite alternate;
            animation-delay: 0s;
        }
        
        .dot-flashing::after {
            left: 15px;
            width: 10px;
            height: 10px;
            border-radius: 5px;
            background-color: var(--accent-color);
            color: var(--accent-color);
            animation: dot-flashing 1s infinite alternate;
            animation-delay: 1s;
        }
        
        @keyframes dot-flashing {
            0% {
                background-color: var(--accent-color);
            }
            50%, 100% {
                background-color: rgba(255, 158, 100, 0.2);
            }
        }


old getwebviewloaderfunction  = function getWebviewContent(webview, extensionPath, scriptUri = null) {
    // If scriptUri is not provided, generate it
    if (!scriptUri) {
        scriptUri = webview.asWebviewUri(vscode.Uri.file(
            path.join(extensionPath, 'src', 'webview.js')
        ));
    }function getWebviewContent(webview, extensionPath, scriptUri = null) {
        // If scriptUri is not provided, generate it
        if (!scriptUri) {
            scriptUri = webview.asWebviewUri(vscode.Uri.file(
                path.join(extensionPath, 'src', 'webview.js')
            ));
        }
        const logoUri = webview.asWebviewUri(vscode.Uri.file(
            path.join(extensionPath, 'media', 'My_icon.png')
        ));
        // Create CSS URI
        const cssUri = webview.asWebviewUri(vscode.Uri.file(
            path.join(extensionPath, 'css', 'style.css')
        ));
    
        return `<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>MATLAB Troubleshooter</title>
        <style>
            :root {
                --user-bg: #0E639C;
                --user-text: #ffffff;
                --bot-bg: #2D2D2D;
                --bot-text: #E8E8E8;
                --code-bg: #1E1E1E;
                --code-text: #D4D4D4;
                --border: #474747;
                --header-bg: #333333;
                --button-bg: #0E639C;
                --button-hover: #1177BB;
                --accent-color: #FF9E64;
                --accent-gradient: linear-gradient(135deg, #FF9E64, #FF7043);
                --logo-shadow: 0 0 10px rgba(255, 158, 100, 0.5);
            }
            
            body {
                font-family: var(--vscode-font-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
                padding: 0;
                margin: 0;
                color: var(--vscode-editor-foreground);
                background-color: var(--vscode-editor-background);
                line-height: 1.5;
            }
            
            .container {
                display: flex;
                flex-direction: column;
                height: 100vh;
                max-width: 900px;
                margin: 0 auto;
                padding: 0 15px;
            }
            
            .header {
                padding: 15px 0;
                text-align: center;
                background-color: var(--header-bg);
                border-bottom: 1px solid var(--border);
                margin-bottom: 20px;
                border-radius: 0 0 8px 8px;
                position: relative;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                background-image: linear-gradient(to right, rgba(0, 0, 0, 0.2), transparent, rgba(0, 0, 0, 0.2));
            }
            
            .header h1 {
                margin: 0;
                color: #ffffff;
                font-size: 1.5rem;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .logo {
                height: 32px;
                width: auto;
                margin-right: 12px;
                border-radius: 50%;
                box-shadow: var(--logo-shadow);
                animation: pulse 3s infinite alternate;
            }
            
            @keyframes pulse {
                0% {
                    box-shadow: 0 0 5px rgba(255, 123, 0, 0.77);
                }
                100% {
                    box-shadow: 0 0 15px rgba(0, 255, 170, 0.98);
                }
            }
            
            .chat-container {
                flex: 1;
                overflow-y: auto;
                margin-bottom: 20px;
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 15px;
                background-color: rgba(0, 0, 0, 0.1);
                display: flex;
                flex-direction: column;
            }
            
            .message {
                margin-bottom: 15px;
                padding: 12px 15px;
                border-radius: 8px;
                max-width: 85%;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
                position: relative;
                line-height: 1.5;
            }
            
            .user-message {
                background-color: var(--user-bg);
                color: var(--user-text);
                align-self: flex-end;
                margin-left: auto;
                border-bottom-right-radius: 2px;
                border-left: 3px solid var(--accent-color);
            }
            
            .bot-message {
                background-color: var(--bot-bg);
                color: var(--bot-text);
                align-self: flex-start;
                border-bottom-left-radius: 2px;
                border-right: 3px solid var(--accent-color);
                padding-left: 40px; /* Space for the logo */
                position: relative;
            }
            
            .bot-logo {
                position: absolute;
                top: 12px;
                left: 10px;
                width: 20px;
                height: 20px;
                border-radius: 50%;
                box-shadow: 0 0 5px rgba(255, 158, 100, 0.4);
            }
            
            .message p {
                margin: 0 0 10px 0;
            }
            
            .message p:last-child {
                margin-bottom: 0;
            }
            
            .message h1, .message h2, .message h3 {
                margin-top: 0;
                margin-bottom: 12px;
                padding-bottom: 8px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                color: var(--accent-color);
                font-weight: 600;
            }
            
            .message pre {
                background-color: var(--code-bg);
                padding: 12px;
                border-radius: 6px;
                overflow-x: auto;
                margin: 10px 0;
                border-left: 3px solid var(--accent-color);
            }
            
            .message code {
                font-family: 'Consolas', 'Courier New', monospace;
                font-size: 0.9em;
                background-color: rgba(0, 0, 0, 0.2);
                padding: 2px 4px;
                border-radius: 3px;
                color: var(--code-text);
            }
            
            .message pre code {
                background-color: transparent;
                padding: 0;
                border-radius: 0;
                color: var(--code-text);
            }
            
            .input-container {
                display: flex;
                margin-bottom: 20px;
                position: relative;
            }
            
            #user-input {
                flex: 1;
                padding: 12px 15px;
                border: 1px solid var(--border);
                border-radius: 8px;
                background-color: var(--bot-bg);
                color: var(--bot-text);
                font-size: 1rem;
                transition: all 0.2s ease;
            }
            
            #user-input:focus {
                outline: none;
                border-color: var(--accent-color);
                box-shadow: 0 0 0 2px rgba(255, 158, 100, 0.25);
            }
            
            button {
                padding: 12px 20px;
                margin-left: 10px;
                background-image: var(--accent-gradient);
                color: #ffffff;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-weight: 500;
                transition: transform 0.2s ease, box-shadow 0.2s ease;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            }
            
            button:hover {
                background-image: linear-gradient(135deg, #FF7043, #FF9E64);
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            
            .sources {
                font-size: 0.85em;
                margin-top: 8px;
                padding-top: 8px;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
                color: rgba(255, 255, 255, 0.6);
            }
            
            /* Loading animation - MATLAB-themed */
            .loading {
                display: flex;
                justify-content: center;
                align-items: center;
                min-height: 60px;
                padding-left: 40px; /* Space for logo */
                position: relative;
                margin: 10px 0;
            }
    
            .loading .bot-logo {
                position: absolute;
                left: 10px;
                top: 50%;
                transform: translateY(-50%);
                width: 20px;
                height: 20px;
                border-radius: 50%;
                box-shadow: 0 0 5px rgba(255, 158, 100, 0.4);
                z-index: 10;
            }
    
            /* MATLAB-inspired matrix loading animation */
            .matlab-loader {
                position: relative;
                width: 150px;
                height: 36px;
                min-height: 36px;
                display: flex;
                justify-content: center;
                align-items: center;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 6px;
                overflow: hidden;
            }
    
            .matlab-loader::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, 
                    transparent 0%, 
                    rgba(255, 158, 100, 0.1) 25%, 
                    rgba(255, 158, 100, 0.3) 50%, 
                    rgba(255, 158, 100, 0.1) 75%, 
                    transparent 100%);
                animation: matlab-sweep 1.5s linear infinite;
            }
    
            @keyframes matlab-sweep {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(100%); }
            }
    
            .matrix-container {
                position: relative;
                height: 100%;
                width: 100%;
                overflow: hidden;
                display: flex;
                justify-content: space-between;
                padding: 0 10px;
            }
    
            .matrix-column {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                width: 20px;
                height: 100%;
            }
    
            .matrix-element {
                font-family: 'Consolas', monospace;
                font-size: 10px;
                color: var(--accent-color);
                opacity: 0;
                transform: translateY(10px);
                animation: element-appear 2s infinite;
            }
    
            @keyframes element-appear {
                0%, 100% { opacity: 0; transform: translateY(10px); }
                50% { opacity: 1; transform: translateY(0); }
            }
    
            /* Sine wave animation */
            .sine-wave {
                position: absolute;
                width: 100%;
                height: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
            }
    
            .sine-path {
                stroke: var(--accent-color);
                stroke-width: 3px; /* Increase from 2px */
                fill: none;
                stroke-dasharray: 150;
                stroke-dashoffset: 300;
                animation: draw-sine 2s infinite;
            }
    
            @keyframes draw-sine {
                0% { stroke-dashoffset: 300; }
                50% { stroke-dashoffset: 150; }
                100% { stroke-dashoffset: 0; }
            }
    
            /* Function text animation */
            .function-text {
                position: absolute;
                font-family: 'Consolas', monospace;
                font-size: 12px;
                font-weight: bold;
                color: var(--accent-color);
                text-align: center;
                width: 100%;
                opacity: 0;
                animation: text-fade 3s infinite;
            }
    
            @keyframes text-fade {
                0%, 100% { opacity: 0; }
                50% { opacity: 1; }
            }
            /* Add this to your CSS */
            .simple-loader {
                width: 50px;
                height: 10px;
                background-color: var(--accent-color);
                border-radius: 5px;
                animation: pulse-width 1.5s infinite ease-in-out;
            }
    
            @keyframes pulse-width {
                0%, 100% { width: 50px; opacity: 0.5; }
                50% { width: 100px; opacity: 1; }
            }
            /* Message feedback styling */
            .message-feedback {
                display: flex;
                justify-content: flex-end;
                margin-top: 10px;
            }
            
            .feedback-button {
                background: transparent;
                border: none;
                color: rgba(255, 255, 255, 0.6);
                cursor: pointer;
                padding: 5px;
                margin-left: 10px;
                border-radius: 50%;
                transition: all 0.2s ease;
            }
            
            .feedback-button:hover {
                background-color: rgba(255, 255, 255, 0.1);
                transform: scale(1.1);
            }
            
            .feedback-message {
                font-size: 0.85em;
                margin-top: 10px;
                color: rgba(255, 255, 255, 0.7);
                font-style: italic;
            }
            
            .feedback-input-container {
                display: flex;
                margin-top: 10px;
                width: 100%;
            }
            
            .feedback-text-input {
                flex: 1;
                padding: 8px 12px;
                border: 1px solid var(--border);
                border-radius: 6px;
                background-color: rgba(0, 0, 0, 0.2);
                color: var(--bot-text);
            }
            
            .feedback-submit {
                padding: 8px 12px;
                margin-left: 8px;
                border-radius: 6px;
            }
            
            .improved-tag {
                position: absolute;
                top: -10px;
                right: 10px;
                background-image: var(--accent-gradient);
                color: white;
                padding: 3px 10px;
                border-radius: 10px;
                font-size: 0.7em;
                font-weight: bold;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1><img src="${logoUri}" class="logo" alt="MATLAB Troubleshooter Logo">MATLAB Troubleshooter</h1>
            </div>
            <div id="chat-container" class="chat-container">
                <div class="message bot-message">
                    <img src="${logoUri}" class="bot-logo" alt="MATLAB Assistant">
                    <div class="message-content">
                        <h3>Welcome to MATLAB Troubleshooter!</h3>
                        <p>I'm your MATLAB Troubleshooting Assistant. I can help you solve MATLAB errors, fix code issues, and provide guidance on best practices.</p>
                        <p>How can I help you today?</p>
                    </div>
                </div>
            </div>
            <div class="input-container">
                <input type="text" id="user-input" placeholder="Type your MATLAB problem here...">
                <button id="send-button">Send</button>
            </div>
        </div>
        
        <script>
            // Add logo to bot messages and loading indicators in the JavaScript
            const chatContainer = document.getElementById('chat-container');
            const originalAppendMessage = window.appendMessage || function() {};
            const originalShowLoading = window.showLoading || function() {};
            
            // Override appendMessage if it exists in the webview.js
            window.appendMessage = function(message, isUser) {
                if (!isUser) {
                    const msgDiv = document.createElement('div');
                    msgDiv.className = 'message bot-message';
                    
                    const logoImg = document.createElement('img');
                    logoImg.src = "${logoUri}";
                    logoImg.className = 'bot-logo';
                    logoImg.alt = 'MATLAB Assistant';
                    
                    const contentDiv = document.createElement('div');
                    contentDiv.className = 'message-content';
                    contentDiv.innerHTML = message;
                    
                    msgDiv.appendChild(logoImg);
                    msgDiv.appendChild(contentDiv);
                    chatContainer.appendChild(msgDiv);
                    
                    // Scroll to bottom
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                } else {
                    // Call original for user messages or handle similarly
                    const msgDiv = document.createElement('div');
                    msgDiv.className = 'message user-message';
                    msgDiv.innerHTML = '<div class="message-content">' + message + '</div>';
                    chatContainer.appendChild(msgDiv);
                    
                    // Scroll to bottom
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
            };
            
            // Override showLoading if it exists in the webview.js
            // Override showLoading if it exists in the webview.js
            // At the beginning of your showLoading function, add:
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'loading';
            loadingDiv.style.backgroundColor = 'rgba(255, 158, 100, 0.2)'; // Add this line for debugging
            loadingDiv.style.border = '1px solid var(--accent-color)'; // Add this line for debugging
            window.showLoading = function() {
                const loadingDiv = document.createElement('div');
                loadingDiv.className = 'loading';
                
                const logoImg = document.createElement('img');
                logoImg.src = "${logoUri}";
                logoImg.className = 'bot-logo';
                logoImg.alt = 'MATLAB Assistant';
                
                const matlabLoader = document.createElement('div');
                matlabLoader.className = 'matlab-loader';
                
                // Create Matrix elements background
                const matrixContainer = document.createElement('div');
                matrixContainer.className = 'matrix-container';
                
                // Create 5 columns
                for (let i = 0; i < 5; i++) {
                    const column = document.createElement('div');
                    column.className = 'matrix-column';
                    
                    // Create matrix elements with different delays
                    for (let j = 0; j < 3; j++) {
                        const element = document.createElement('div');
                        element.className = 'matrix-element';
                        // Fixed: Using backticks instead of single quotes
                        element.style.animationDelay = (i * 0.1 + j * 0.2) + 's';
                        element.innerText = Math.random() > 0.5 ? '1' : '0';
                        column.appendChild(element);
                    }
                    
                    matrixContainer.appendChild(column);
                }
                
                // Create the sine wave SVG
                const sineWave = document.createElement('div');
                    sineWave.className = 'sine-wave';
                    sineWave.innerHTML = '<svg width="120" height="30" viewBox="0 0 120 30" style="overflow: visible;">
                        <path class="sine-path" d="M0,15 C10,5 20,25 30,15 C40,5 50,25 60,15 C70,5 80,25 90,15 C100,5 110,25 120,15" />
                    </svg>';
                
                // Create the function text
                const functionText = document.createElement('div');
                functionText.className = 'function-text';
                functionText.innerText = 'Processing...';
                
                matlabLoader.appendChild(matrixContainer);
                matlabLoader.appendChild(sineWave);
                matlabLoader.appendChild(functionText);
                // After creating matlabLoader but before adding it to loadingDiv
                const simpleLoader = document.createElement('div');
                simpleLoader.className = 'simple-loader';
    
                // Add both loaders
                loadingDiv.appendChild(logoImg);
                loadingDiv.appendChild(matlabLoader);
                loadingDiv.appendChild(simpleLoader); // Add the simple loader as fallback
                
                chatContainer.appendChild(loadingDiv);
                
                // Scroll to bottom
                chatContainer.scrollTop = chatContainer.scrollHeight;
                
                return loadingDiv;
            };
            
            // Keep the original script
        </script>
        
        <script src="${scriptUri}"></script>
    </body>
    </html>`;
    }







The getwebviewloaderfunction = function getWebviewContent(webview, extensionPath, scriptUri = null) {
        // If scriptUri is not provided, generate it
        if (!scriptUri) {
            scriptUri = webview.asWebviewUri(vscode.Uri.file(
                path.join(extensionPath, 'src', 'webview.js')
            ));
        }
        const logoUri = webview.asWebviewUri(vscode.Uri.file(
            path.join(extensionPath, 'media', 'My_icon.png')
        ));
        // Create CSS URI
        const cssUri = webview.asWebviewUri(vscode.Uri.file(
            path.join(extensionPath, 'css', 'style.css')
        ));
    
        return `<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>MATLAB Troubleshooter</title>
        <style>
            :root {
                --user-bg: #0E639C;
                --user-text: #ffffff;
                --bot-bg: #2D2D2D;
                --bot-text: #E8E8E8;
                --code-bg: #1E1E1E;
                --code-text: #D4D4D4;
                --border: #474747;
                --header-bg: #333333;
                --button-bg: #0E639C;
                --button-hover: #1177BB;
                --accent-color: #FF9E64;
                --accent-gradient: linear-gradient(135deg, #FF9E64, #FF7043);
                --logo-shadow: 0 0 10px rgba(255, 158, 100, 0.5);
            }
            
            body {
                font-family: var(--vscode-font-family, 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif);
                padding: 0;
                margin: 0;
                color: var(--vscode-editor-foreground);
                background-color: var(--vscode-editor-background);
                line-height: 1.5;
            }
            
            .container {
                display: flex;
                flex-direction: column;
                height: 100vh;
                max-width: 900px;
                margin: 0 auto;
                padding: 0 15px;
            }
            
            .header {
                padding: 15px 0;
                text-align: center;
                background-color: var(--header-bg);
                border-bottom: 1px solid var(--border);
                margin-bottom: 20px;
                border-radius: 0 0 8px 8px;
                position: relative;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                background-image: linear-gradient(to right, rgba(0, 0, 0, 0.2), transparent, rgba(0, 0, 0, 0.2));
            }
            
            .header h1 {
                margin: 0;
                color: #ffffff;
                font-size: 1.5rem;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .logo {
                height: 32px;
                width: auto;
                margin-right: 12px;
                border-radius: 50%;
                box-shadow: var(--logo-shadow);
                animation: pulse 3s infinite alternate;
            }
            
            @keyframes pulse {
                0% {
                    box-shadow: 0 0 5px rgba(255, 123, 0, 0.77);
                }
                100% {
                    box-shadow: 0 0 15px rgba(0, 255, 170, 0.98);
                }
            }
            
            .chat-container {
                flex: 1;
                overflow-y: auto;
                margin-bottom: 20px;
                border: 1px solid var(--border);
                border-radius: 8px;                flex: 1;                flex: 1;
                overflow-y: auto;
                margin-bottom: 20px;
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 15px;
                background-color: rgba(0, 0, 0, 0.1);
                display: flex;
                flex-direction: column;
            }
                overflow-y: auto;
                margin-bottom: 20px;
                border: 1px solid var(--border);
                border-radius: 8px;
                padding: 15px;
                background-color: rgba(0, 0, 0, 0.1);
                display: flex;
                flex-direction: column;
            }
                padding: 15px;
                background-color: rgba(0, 0, 0, 0.1);
                display: flex;
                flex-direction: column;
            }

            
            .message {
                margin-bottom: 15px;
                padding: 12px 15px;
                border-radius: 8px;
                max-width: 85%;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
                position: relative;
                line-height: 1.5;
            }
            
            .user-message {
                background-color: var(--user-bg);
                color: var(--user-text);
                align-self: flex-end;
                margin-left: auto;
                border-bottom-right-radius: 2px;
                border-left: 3px solid var(--accent-color);
            }
            
            .bot-message {
                background-color: var(--bot-bg);
                color: var(--bot-text);
                align-self: flex-start;
                border-bottom-left-radius: 2px;
                border-right: 3px solid var(--accent-color);
                padding-left: 40px; /* Space for the logo */
                position: relative;
            }
            
            .bot-logo {
                position: absolute;
                top: 12px;
                left: 10px;
                width: 20px;
                height: 20px;
                border-radius: 50%;
                box-shadow: 0 0 5px rgba(255, 158, 100, 0.4);
            }
            
            .message p {
                margin: 0 0 10px 0;
            }
            
            .message p:last-child {
                margin-bottom: 0;
            }
            
            .message h1, .message h2, .message h3 {
                margin-top: 0;
                margin-bottom: 12px;
                padding-bottom: 8px;
                border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                color: var(--accent-color);
                font-weight: 600;
            }
            
            .message pre {
                background-color: var(--code-bg);
                padding: 12px;
                border-radius: 6px;
                overflow-x: auto;
                margin: 10px 0;
                border-left: 3px solid var(--accent-color);
            }
            
            .message code {
                font-family: 'Consolas', 'Courier New', monospace;
                font-size: 0.9em;
                background-color: rgba(0, 0, 0, 0.2);
                padding: 2px 4px;
                border-radius: 3px;
                color: var(--code-text);
            }
            
            .message pre code {
                background-color: transparent;
                padding: 0;
                border-radius: 0;
                color: var(--code-text);
            }
            
            .input-container {
                display: flex;
                margin-bottom: 20px;
                position: relative;
            }
            
            #user-input {
                flex: 1;
                padding: 12px 15px;
                border: 1px solid var(--border);
                border-radius: 8px;
                background-color: var(--bot-bg);
                color: var(--bot-text);
                font-size: 1rem;
                transition: all 0.2s ease;
            }
            
            #user-input:focus {
                outline: none;
                border-color: var(--accent-color);
                box-shadow: 0 0 0 2px rgba(255, 158, 100, 0.25);
            }
            
            button {
                padding: 12px 20px;
                margin-left: 10px;
                background-image: var(--accent-gradient);
                color: #ffffff;
                border: none;
                border-radius: 8px;
                cursor: pointer;
                font-weight: 500;
                transition: transform 0.2s ease, box-shadow 0.2s ease;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            }
            
            button:hover {
                background-image: linear-gradient(135deg, #FF7043, #FF9E64);
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            
            .sources {
                font-size: 0.85em;
                margin-top: 8px;
                padding-top: 8px;
                border-top: 1px solid rgba(255, 255, 255, 0.1);
                color: rgba(255, 255, 255, 0.6);
            }
            
            /* Loading animation - MATLAB-themed */
            .loading {
                display: flex;
                justify-content: flex-start;
                align-items: center;
                min-height: 60px;
                padding: 15px;
                padding-left: 40px; /* Space for logo */
                position: relative;
                margin: 10px 0;
                background-color: var(--bot-bg);
                border-radius: 8px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
                border-right: 3px solid var(--accent-color);
                max-width: 85%;
                align-self: flex-start;
            }
    
            .loading .bot-logo {
                position: absolute;
                left: 10px;
                top: 50%;
                transform: translateY(-50%);
                width: 20px;
                height: 20px;
                border-radius: 50%;
                box-shadow: 0 0 5px rgba(255, 158, 100, 0.4);
                z-index: 10;
            }
    
            /* MATLAB-inspired matrix loading animation */
            .matlab-loader {
                position: relative;
                width: 150px;
                height: 36px;
                min-height: 36px;
                display: flex;
                justify-content: center;
                align-items: center;
                background-color: rgba(0, 0, 0, 0.2);
                border-radius: 6px;
                overflow: hidden;
            }
    
            .matlab-loader::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, 
                    transparent 0%, 
                    rgba(255, 158, 100, 0.1) 25%, 
                    rgba(255, 158, 100, 0.3) 50%, 
                    rgba(255, 158, 100, 0.1) 75%, 
                    transparent 100%);
                animation: matlab-sweep 1.5s linear infinite;
            }
    
            @keyframes matlab-sweep {
                0% { transform: translateX(-100%); }
                100% { transform: translateX(100%); }
            }
    
            .matrix-container {
                position: relative;
                height: 100%;
                width: 100%;
                overflow: hidden;
                display: flex;
                justify-content: space-between;
                padding: 0 10px;
            }
    
            .matrix-column {
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                width: 20px;
                height: 100%;
            }
    
            .matrix-element {
                font-family: 'Consolas', monospace;
                font-size: 10px;
                color: var(--accent-color);
                opacity: 0;
                transform: translateY(10px);
                animation: element-appear 2s infinite;
            }
    
            @keyframes element-appear {
                0%, 100% { opacity: 0; transform: translateY(10px); }
                50% { opacity: 1; transform: translateY(0); }
            }
    
            /* Sine wave animation */
            .sine-wave {
                position: absolute;
                width: 100%;
                height: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
            }
    
            .sine-path {
                stroke: var(--accent-color);
                stroke-width: 3px; /* Increase from 2px */
                fill: none;
                stroke-dasharray: 150;
                stroke-dashoffset: 300;
                animation: draw-sine 2s infinite;
            }
    
            @keyframes draw-sine {
                0% { stroke-dashoffset: 300; }
                50% { stroke-dashoffset: 150; }
                100% { stroke-dashoffset: 0; }
            }
    
            /* Function text animation */
            .function-text {
                position: absolute;
                font-family: 'Consolas', monospace;
                font-size: 12px;
                font-weight: bold;
                color: var(--accent-color);
                text-align: center;
                width: 100%;
                opacity: 0;
                animation: text-fade 3s infinite;
            }
    
            @keyframes text-fade {
                0%, 100% { opacity: 0; }
                50% { opacity: 1; }
            }
            /* Add this to your CSS */
            .simple-loader {
                width: 50px;
                height: 10px;
                background-color: var(--accent-color);
                border-radius: 5px;
                animation: pulse-width 1.5s infinite ease-in-out;
            }
    
            @keyframes pulse-width {
                0%, 100% { width: 50px; opacity: 0.5; }
                50% { width: 100px; opacity: 1; }
            }
            /* Message feedback styling */
            .message-feedback {
                display: flex;
                justify-content: flex-end;
                margin-top: 10px;
            }
            
            .feedback-button {
                background: transparent;
                border: none;
                color: rgba(255, 255, 255, 0.6);
                cursor: pointer;
                padding: 5px;
                margin-left: 10px;
                border-radius: 50%;
                transition: all 0.2s ease;
            }
            
            .feedback-button:hover {
                background-color: rgba(255, 255, 255, 0.1);
                transform: scale(1.1);
            }
            
            .feedback-message {
                font-size: 0.85em;
                margin-top: 10px;
                color: rgba(255, 255, 255, 0.7);
                font-style: italic;
            }
            
            .feedback-input-container {
                display: flex;
                margin-top: 10px;
                width: 100%;
            }
            
            .feedback-text-input {
                flex: 1;
                padding: 8px 12px;
                border: 1px solid var(--border);
                border-radius: 6px;
                background-color: rgba(0, 0, 0, 0.2);
                color: var(--bot-text);
            }
            
            .feedback-submit {
                padding: 8px 12px;
                margin-left: 8px;
                border-radius: 6px;
            }
            
            .improved-tag {
                position: absolute;
                top: -10px;
                right: 10px;
                background-image: var(--accent-gradient);
                color: white;
                padding: 3px 10px;
                border-radius: 10px;
                font-size: 0.7em;
                font-weight: bold;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1><img src="${logoUri}" class="logo" alt="MATLAB Troubleshooter Logo">MATLAB Troubleshooter</h1>
            </div>
            <div id="chat-container" class="chat-container">
                <div class="message bot-message">
                    <img src="${logoUri}" class="bot-logo" alt="MATLAB Assistant">
                    <div class="message-content">
                        <h3>Welcome to MATLAB Troubleshooter!</h3>
                        <p>I'm your MATLAB Troubleshooting Assistant. I can help you solve MATLAB errors, fix code issues, and provide guidance on best practices.</p>
                        <p>How can I help you today?</p>
                    </div>
                </div>
            </div>
            <div class="input-container">
                <input type="text" id="user-input" placeholder="Type your MATLAB problem here...">
                <button id="send-button">Send</button>
            </div>
        </div>
        
        <script>
            // Add logo to bot messages and loading indicators in the JavaScript
            const chatContainer = document.getElementById('chat-container');
            const originalAppendMessage = window.appendMessage || function() {};
            const originalShowLoading = window.showLoading || function() {};
            
            // Override appendMessage if it exists in the webview.js
            window.appendMessage = function(message, isUser) {
                if (!isUser) {
                    const msgDiv = document.createElement('div');
                    msgDiv.className = 'message bot-message';
                    
                    const logoImg = document.createElement('img');
                    logoImg.src = "${logoUri}";
                    logoImg.className = 'bot-logo';
                    logoImg.alt = 'MATLAB Assistant';
                    
                    const contentDiv = document.createElement('div');
                    contentDiv.className = 'message-content';
                    contentDiv.innerHTML = message;
                    
                    msgDiv.appendChild(logoImg);
                    msgDiv.appendChild(contentDiv);
                    chatContainer.appendChild(msgDiv);
                    
                    // Scroll to bottom
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                } else {
                    // Call original for user messages or handle similarly
                    const msgDiv = document.createElement('div');
                    msgDiv.className = 'message user-message';
                    msgDiv.innerHTML = '<div class="message-content">' + message + '</div>';
                    chatContainer.appendChild(msgDiv);
                    
                    // Scroll to bottom
                    chatContainer.scrollTop = chatContainer.scrollHeight;
                }
            };
            
            // Override showLoading if it exists in the webview.js
            // Override showLoading if it exists in the webview.js
            // At the beginning of your showLoading function, add:
            // const loadingDiv = document.createElement('div');
            // loadingDiv.className = 'loading';
            // loadingDiv.style.backgroundColor = 'rgba(255, 158, 100, 0.2)'; // Add this line for debugging
            // loadingDiv.style.border = '1px solid var(--accent-color)'; // Add this line for debugging
            window.showLoading = function() {
                // Create the loading container
                const loadingDiv = document.createElement('div');
                loadingDiv.className = 'loading';
                loadingDiv.style.backgroundColor = 'var(--bot-bg)';
                loadingDiv.style.borderRadius = '8px';
                loadingDiv.style.margin = '10px 0';
                loadingDiv.style.alignSelf = 'flex-start';
                loadingDiv.style.maxWidth = '85%';
                
                // Add the logo
                const logoImg = document.createElement('img');
                logoImg.src = "${logoUri}";
                logoImg.className = 'bot-logo';
                logoImg.alt = 'MATLAB Assistant';
                
                // Create the MATLAB-themed loader
                const matlabLoader = document.createElement('div');
                matlabLoader.className = 'matlab-loader';
                
                // Create Matrix elements background
                const matrixContainer = document.createElement('div');
                matrixContainer.className = 'matrix-container';
                
                // Create 5 columns
                for (let i = 0; i < 5; i++) {
                    const column = document.createElement('div');
                    column.className = 'matrix-column';
                    
                    // Create matrix elements with different delays
                    for (let j = 0; j < 3; j++) {
                        const element = document.createElement('div');
                        element.className = 'matrix-element';
                        element.style.animationDelay =(i * 0.1 + j * 0.2) + 's';
                        element.innerText = Math.random() > 0.5 ? '1' : '0';
                        column.appendChild(element);
                    }
                    
                    matrixContainer.appendChild(column);
                }
                
                // Create the sine wave SVG
                const sineWave = document.createElement('div');
                sineWave.className = 'sine-wave';
                sineWave.innerHTML = '<svg width="120" height="30" viewBox="0 0 120 30" style="overflow: visible;">' +
                    '<path class="sine-path" d="M0,15 C10,5 20,25 30,15 C40,5 50,25 60,15 C70,5 80,25 90,15 C100,5 110,25 120,15" />' +
                    '</svg>';
                
                // Create the function text
                const functionText = document.createElement('div');
                functionText.className = 'function-text';
                functionText.innerText = 'Processing...';
                
                // Add all elements to the loader
                matlabLoader.appendChild(matrixContainer);
                matlabLoader.appendChild(sineWave);
                matlabLoader.appendChild(functionText);
                
                // Create a simple loader as fallback
                const simpleLoader = document.createElement('div');
                simpleLoader.className = 'simple-loader';
                
                // Add everything to the loading div
                loadingDiv.appendChild(logoImg);
                loadingDiv.appendChild(matlabLoader);
                
                // Add the loading div to the chat container
                chatContainer.appendChild(loadingDiv);
                
                // Scroll to bottom
                chatContainer.scrollTop = chatContainer.scrollHeight;
                
                return loadingDiv;
            };
            
            window.hideLoading = function(loadingDiv) {
                if (loadingDiv && loadingDiv.parentNode) {
                    loadingDiv.parentNode.removeChild(loadingDiv);
                }
            };


            
        // Keep the original script
    </script>
    
    <script src="${scriptUri}"></script>
</body>
</html>`;
}